understand_problem_task:
  description: >
    Analyze the given {problem} statement to identify and extract all relevant components for the next stages of processing.
    You are required to:
    1. Parse the *constraints* provided in the {problem} to define the boundaries within which the solution must operate.
    2. Identify the *input format* specifications, including the types and structure of data that will be provided.
    3. Define the *output format* based on the {problem} requirements, ensuring that it aligns with the specified solution expectations.
    4. Break down the {problem} into key steps that will be handled in subsequent stages.
    5. Provide detailed explanations or clarifications on any ambiguities in the {problem} statement.
    6. Consider edge cases and potential issues that might arise in the solution process and document them for later agents.
    
  expected_output: >
    A well-structured and detailed breakdown of the {problem} that includes:
    1. A clear list of constraints.
    2. A description of the input format with examples.
    3. A description of the expected output format with examples.
    4. A list of steps for solving the {problem}, organized for further agents to implement.
    5. A list of edge cases and ambiguous areas to be addressed in future stages.
    6. A .md file carrying all this detail
  agent: phd_mathematician

design_algorithm_task:
  description: >
    Design an efficient algorithm that can solve the given problem based on the 'understand_problem_task'. 
    The task requires you to:
    1. Review the 'understand_problem_task' thoroughly and extract the key constraints, input/output format, and edge cases.
    2. Identify and define the core logic and steps necessary to solve the problem efficiently while adhering to the constraints.
    3. Ensure the algorithm can handle all edge cases and minimize the time and space complexity.
    4. Develop a solution that is scalable and works across varying input sizes, ensuring it provides accurate results under all possible scenarios.
    5. Optimize the algorithm by leveraging the appropriate data structures, mathematical models, and techniques.
    6. Provide an explanation of how the algorithm handles the different edge cases, constraints, and performs under typical as well as extreme conditions.
    
  expected_output: >
    A detailed algorithm that:
    1. Precisely addresses the problem using the 'understand_problem_task'.
    2. Includes pseudocode or a high-level flowchart of the core steps involved in solving the problem.
    3. A description of the chosen approach, including justifications for the data structures and optimization techniques used.
    4. A well-explained handling of edge cases and constraints.
    5. An analysis of the time and space complexity of the algorithm.
    6. A final Python implementation ready for testing and deployment.
  agent: computer_scientist

code_generation_task:
  description: >
    Generate a Python code solution for the problem statement using the data provided from the 'understand_problem_analysis' and 'design_algorithm'. The task requires you to:
    1. Review the 'understand_problem_analysis' and the algorithmic solution provided by the 'design_algorithm' agent.
    2. Translate the designed algorithm into an efficient and scalable Python code snippet.
    3. Ensure that the code is well-structured, adheres to best practices, and is easily understandable.
    4. Handle all edge cases as specified in the problem statement and ensure the solution works under the constraints.
    5. Optimize the code for performance, keeping the time and space complexity to a minimum.
    6. Provide inline comments to explain the logic behind critical sections of the code.
    7. Test the generated code against sample inputs and outputs to ensure correctness.
  expected_output: >
   A Python code solution that:
    1. Follows the algorithm designed in the 'design_algorithm' task.
    2. Is well-documented with comments and adheres to Pythonic conventions (PEP8).
    3. Efficiently handles all constraints and edge cases specified in the problem statement.
    4. Provides a clear and scalable solution that can handle large inputs effectively.
    5. Includes sample test cases to demonstrate the correctness of the code.
  agent: computer_programmer

code_executor_taskk:
  description: >
    Execute the Python code snippet generated by the 'code_generation' agent using the 'CodeInterpreterTool' and provide the results. The task involves:
    1. Loading the Python code provided by the 'code_generation' agent.
    2. Using the CodeInterpreterTool to run the code and capture the output.
    3. Ensure that the code handles all edge cases, constraints, and is scalable for larger input sizes.
    4. Evaluate the correctness of the code output based on the problem statement's expected results.
    5. Capture any errors or exceptions and return them as part of the output, with suggestions for potential debugging steps if necessary.
    
  expected_output: >
    1. The correct solution output for the problem, based on the inputs provided to the code.
    2. Error or exception details, if any, during the execution, with helpful insights on debugging.
    3. Performance statistics (optional) such as runtime and memory usage, if required.
    
  agent: code_interpretor
